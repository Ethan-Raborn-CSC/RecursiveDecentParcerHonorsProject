const txtn = document.getElementById('codein');
const btn1 = document.getElementById('runbutton');
const txtot = document.getElementById('textout');
const tknot = document.getElementById('tokenoutput');
const ltxt = document.getElementById('lefttext');
const lmtxt = document.getElementById('midltext');
const rtxt = document.getElementById('righttext');
const btn2 = document.getElementById('nxtstp');
//const tstxt =document.getElementById('testtext');

const map = 
[
    [[1,5], [0,0], [0,0], [1,4], [0,0], [0,0], [3,1], [3,2], [3,3]],
    [[0,0], [1,6], [0,0], [0,0], [0,0], [4,0], [0,0], [0,0], [0,0]],
    [[0,0], [2,2], [1,7], [0,0], [2,2], [2,2], [0,0], [0,0], [0,0]],
    [[0,0], [2,4], [2,4], [0,0], [2,4], [2,4], [0,0], [0,0], [0,0]],
    [[1,5], [0,0], [0,0], [1,4], [0,0], [0,0], [3,8], [3,2], [3,3]],
    [[0,0], [2,6], [2,6], [0,0], [2,6], [2,6], [0,0], [0,0], [0,0]],
    [[1,5], [0,0], [0,0], [1,4], [0,0], [0,0], [0,0], [3,9], [3,3]],
    [[1,5], [0,0], [0,0], [1,4], [0,0], [0,0], [0,0], [0,0], [3,10]],
    [[0,0], [1,6], [0,0], [0,0], [1,11], [0,0], [0,0], [0,0], [0,0]],
    [[0,0], [2,1], [1,7], [0,0], [2,1], [2,1], [0,0], [0,0], [0,0]],
    [[0,0], [2,3], [2,3], [0,0], [2,3], [2,3], [0,0], [0,0], [0,0]],
    [[0,0], [2,5], [2,5], [0,0], [2,5], [2,5], [0,0], [0,0], [0,0]],
]

const lang = 
[
    ["null", "null"],
    ["EplusT", "E"],
    ["T","E"],
    ["TmultF","T"],
    ["F","T"],
    ["lparErpar","F"],
    ["id", "F"]
]



// //Probably the stupidist way to do this, but I'm out of time
// const idm1 = document.getElementById("i-1");
// const plusm1 = document.getElementById("+-1");
// const multm1 = document.getElementById("*-1");
// const lparm1 = document.getElementById("l-1");
// const rparm1 = document.getElementById("r-1");
// const dolm1 = document.getElementById("d-1");
// const em1 = document.getElementById("e-1");
// const tm1 = document.getElementById("t-1");
// const fm1 = document.getElementById("f-1");

// const id0 = document.getElementById("i0");
// const plus0 = document.getElementById("+0");
// const mult0 = document.getElementById("*0");
// const lpar0 = document.getElementById("l0");
// const rpar0 = document.getElementById("r0");
// const dol0 = document.getElementById("d0");
// const e0 = document.getElementById("e0");
// const t0 = document.getElementById("t0");
// const f0 = document.getElementById("f0");

// const id1 = document.getElementById("i1");
// const plus1 = document.getElementById("+1");
// const mult1 = document.getElementById("*1");
// const lpar1 = document.getElementById("l1");
// const rpar1 = document.getElementById("r1");
// const dol1 = document.getElementById("d1");
// const e1 = document.getElementById("e1");
// const t1 = document.getElementById("t1");
// const f1 = document.getElementById("f1");

// const id2 = document.getElementById("i2");
// const plus2 = document.getElementById("+2");
// const mult2 = document.getElementById("*2");
// const lpar2 = document.getElementById("l2");
// const rpar2 = document.getElementById("r2");
// const dol2 = document.getElementById("d2");
// const e2 = document.getElementById("e2");
// const t2 = document.getElementById("t2");
// const f2 = document.getElementById("f2");

// const id3 = document.getElementById("i3");
// const plus3 = document.getElementById("+3");
// const mult3 = document.getElementById("*3");
// const lpar3 = document.getElementById("l3");
// const rpar3 = document.getElementById("r3");
// const dol3 = document.getElementById("d3");
// const e3 = document.getElementById("e3");
// const t3 = document.getElementById("t3");
// const f3 = document.getElementById("f3");

// const id4 = document.getElementById("i4");
// const plus4 = document.getElementById("+4");
// const mult4 = document.getElementById("*4");
// const lpar4 = document.getElementById("l4");
// const rpar4 = document.getElementById("r4");
// const dol4 = document.getElementById("d4");
// const e4 = document.getElementById("e4");
// const t4 = document.getElementById("t4");
// const f4 = document.getElementById("f4");

// const id5 = document.getElementById("i5");
// const plus5 = document.getElementById("+5");
// const mult5 = document.getElementById("*5");
// const lpar5 = document.getElementById("l5");
// const rpar5 = document.getElementById("r5");
// const dol5 = document.getElementById("d5");
// const e5 = document.getElementById("e5");
// const t5 = document.getElementById("t5");
// const f5 = document.getElementById("f5");

// const id6 = document.getElementById("i6");
// const plus6 = document.getElementById("+6");
// const mult6 = document.getElementById("*6");
// const lpar6 = document.getElementById("l6");
// const rpar6 = document.getElementById("r6");
// const dol6 = document.getElementById("d6");
// const e6 = document.getElementById("e6");
// const t6 = document.getElementById("t6");
// const f6 = document.getElementById("f6");

// const id7 = document.getElementById("i7");
// const plus7 = document.getElementById("+7");
// const mult7 = document.getElementById("*7");
// const lpar7 = document.getElementById("l7");
// const rpar7 = document.getElementById("r7");
// const dol7 = document.getElementById("d7");
// const e7 = document.getElementById("e7");
// const t7 = document.getElementById("t7");
// const f7 = document.getElementById("f7");

// const id8 = document.getElementById("i8");
// const plus8 = document.getElementById("+8");
// const mult8 = document.getElementById("*8");
// const lpar8 = document.getElementById("l8");
// const rpar8 = document.getElementById("r8");
// const dol8 = document.getElementById("d8");
// const e8 = document.getElementById("e8");
// const t8 = document.getElementById("t8");
// const f8 = document.getElementById("f8");

// const id9 = document.getElementById("i9");
// const plus9 = document.getElementById("+9");
// const mult9 = document.getElementById("*9");
// const lpar9 = document.getElementById("l9");
// const rpar9 = document.getElementById("r9");
// const dol9 = document.getElementById("d9");
// const e9 = document.getElementById("e9");
// const t9 = document.getElementById("t9");
// const f9 = document.getElementById("f9");

// const id10 = document.getElementById("i10");
// const plus10 = document.getElementById("+10");
// const mult10 = document.getElementById("*10");
// const lpar10 = document.getElementById("l10");
// const rpar10 = document.getElementById("r10");
// const dol10 = document.getElementById("d10");
// const e10 = document.getElementById("e10");
// const t10 = document.getElementById("t10");
// const f10 = document.getElementById("f10");

// const id11 = document.getElementById("i11");
// const plus11 = document.getElementById("+11");
// const mult11 = document.getElementById("*11");
// const lpar11 = document.getElementById("l11");
// const rpar11 = document.getElementById("r11");
// const dol11 = document.getElementById("d11");
// const e11 = document.getElementById("e11");
// const t11 = document.getElementById("t11");
// const f11 = document.getElementById("f11");



let textinput = 'null';
let tokens = [];
let tokensStringed = '';

var itorator = 0;
var stritorator = 0;
var character;
var preempt = false;

let stack = '0';
let input = '';
let action = 'Shift5';
//command is a way of keeping up with actions.
//Shift corisponds with 0, Reduce corisponds with 1,
//and accept corisponds with 2.
//so Shift3 (or S3) would translate to a [0, 3] command



function listinputtext(){
    textinput = txtn.value;
    txtot.innerHTML = textinput;;

    //create the tokens
    tokenrun()


    //lists out the tokens;
    StringTokenLister()
    tknot.innerHTML = tokensStringed;



    
    
    
    ltxt.innerHTML = "Stack:<br>" + stack+"<br>";
    lmtxt.innerHTML = "Input:<br>";
    rtxt.innerHTML = "Action:<br>";
    itorator = 0;
    document.getElementById('runbutton').disabled = true;
}

btn1.addEventListener('click', listinputtext);




function tokenrun(){
    itorator = 0;
    character = textinput.charAt(itorator);
    preempt = false;



    while(itorator < textinput.length)
    {
        preempt= false;
        switch (character)
        {
            case '*':
                tokens.push('mult');
                break;
            case '+':
                tokens.push('plus');
                break;
            case '(':
                tokens.push('lpar');
                break;
            case ')':
                tokens.push('rpar');
                break;
            case '$':
                tokens.push('$');
                break;
            default:
                tokens.push('id');
                while((!preempt) && itorator < textinput.length)
                {
                    itorator++;
                    character = textinput.charAt(itorator);

                    switch(character)
                    {
                        case '*':
                        case '+':
                        case '(':
                        case ')':
                        case '$':
                            preempt = true;
                            break;
                    }
                }
                break;
        }

        if(!preempt)
        {
            itorator++;
            if(itorator < textinput.length)
                character = textinput.charAt(itorator);
        }
    }


    
}
function StringTokenLister(){
    tokensStringed = '';
    stritorator = 0;
    while(stritorator < tokens.length)
    {
        tokensStringed = tokensStringed + '\n' + (tokens[stritorator]+'');
        stritorator++;
    }
}

function parstep()
{
    StringTokenLister();
    input = tokensStringed;
    lmtxt.innerHTML+=input+"<br>";

    var firstTok = tokens[0];
    var col = -1;
    var row = getStackNum();
    //tstxt.innerHTML+="row: "+row+"<br>";



    switch(firstTok)
    {
        case 'id':
            col = 0;
            break;
        case 'plus':
            col = 1;
            break;
        case 'mult':
            col = 2;
            break;
        case 'lpar':
            col = 3;
            break;
        case 'rpar':
            col = 4;
            break;
        case '$':
            col = 5;
            break;
    }

    

    var command = map[row][col][0];
    var key = map[row][col][1];

    //tstxt.innerHTML+="command: "+command+"<br>";
    //tstxt.innerHTML+="key: "+key+"<br>";

    switch(command)
    {
        case 0:
            perror();
            break;
        case 1:
            shift(key);
            break;
        case 2:
            reduce(key);
            break;
        case 3:
            perror();
            break;
        case 4:
            acceptParse();
            break;
    }
}
btn2.addEventListener('click', parstep)

function getStackNum()
{
    //tstxt.innerHTML+="getStknumfun<br>";
    var end = stack.length-1;
    //tstxt.innerHTML+="end: "+end+"<br>";
    var c = stack.charAt(end);
    var num = '';
    //tstxt.innerHTML+="c: "+c+"<br>";
    var unfinished = true;
    while(unfinished && end >= 0)
    {
        switch(c)
        {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                unfinished = true;
                num = c + num;
                break;
            default:
                unfinished = false;
                break;
        }

        end--;
        if(end>=0)
            c = stack.charAt(end);
    }
    return parseInt(num);
}

function perror()
{ 
    ltxt.innerHTML += 'ERROR! PARSE FAILED!'
    rtxt.innerHTML += 'ERROR! PARSE FAILED!'
    lmtxt.innerHTML += 'ERROR! PARSE FAILED!'
}

function shift(pow)
{
    stack = stack + tokens[0]+pow;
    tokens.shift();
    StringTokenLister();

    

    
    ltxt.innerHTML+=stack+"<br>";

    rtxt.innerHTML += "Shift "+pow+"<br>";
}

function reduce(pow)
{
    //tstxt.innerHTML+="pow: "+pow+"<br>";
    

    var git = lang[pow][0].length;
    var p = lang[pow][1];

    var end = stack.length-1;
    var c = stack.charAt(end);
    var cycle;

    for(i=0; i < git; i++)
    {
        cycle = true;
        while(cycle)
        {
            switch(c)
            {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    cycle = true;
                    break;
                default:
                    cycle = false;
                    break;
            }
            //tstxt.innerHTML+="InitialStack: "+stack+"<br>";
            stack = stack.substring(0,end);
            //tstxt.innerHTML+="PostStack: "+stack+"<br>";
            end--;
            c = stack.charAt(end);
        }
        //tstxt.innerHTML+="loop!<br>";
    }

    var ref = getStackNum();
    //tstxt.innerHTML+="ref: "+ref+"<br>";
    stack = stack + p;
    switch(p)
    {
        case 'E':
            stack = stack + map[ref][6][1];
            break;
        case 'T':
            stack = stack + map[ref][7][1];
            break;
        case 'F':
            stack = stack + map[ref][8][1];
    }

    ltxt.innerHTML+=stack+"<br>";
    rtxt.innerHTML+="Reduce "+pow+" ["+(ref+"")+", "+p+"]<br>";

}

function acceptParse()
{
    //ltxt.innerHTML+="PARSE SUCCESSFULL!";
    //lmtxt.innerHTML+="PARSE SUCCESSFULL!";
    rtxt.innerHTML+="accept";
    document.getElementById('nxtstp').disabled = true;
}